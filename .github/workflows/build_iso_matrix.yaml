name: GitHub Action for building DolphinOS ISO

on: workflow_dispatch

permissions:
  contents: write

jobs:
  build_iso:
    name: Build ${{ matrix.edition }} ISO
    runs-on: self-hosted

    container:
      image: ghcr.io/dolphinos-development/dolphinos-buildsystem-images/arch_iso_builder_image:latest
      options: --user 0:0 --privileged
      env:
        TZ: Europe/Madrid

    strategy:
      matrix:
        edition: [intel-amd, nvidia]

    steps:
      - name: Set current date and hour
        id: date
        run: |
          NOW=$(date +'%Y.%m.%d.%H.%M')
          TAG_NOW="$(echo "$NOW" | tr '.' '_')"
          echo "NOW=$NOW" | tee -a $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          path: repo

      - name: Cache pacman packages
        uses: actions/cache@v4
        with:
          path: /var/cache/pacman/pkg
          key: ${{ runner.os }}-pacman-${{ matrix.edition }}-${{ hashFiles(format('repo/{0}/archiso/packages.x86_64', matrix.edition)) }}
          restore-keys: |
            ${{ runner.os }}-pacman-${{ matrix.edition }}-

      - name: Download and copy system packages
        working-directory: repo/${{ matrix.edition }}
        run: |
          mkdir -p archiso/airootfs/var/dolphinos-packages
          mkdir /pkgs
          if [ "${{ matrix.edition }}" = "intel-amd" ]; then
            pacman -Syw --noconfirm --cachedir /pkgs dolphinos-configs
            cp /pkgs/dolphinos-configs*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/dolphinos-configs.pkg.tar.zst
          else
            pacman -Syw --noconfirm --cachedir /pkgs dolphinos-configs-nvidia
            cp /pkgs/dolphinos-configs-nvidia*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/dolphinos-configs-nvidia.pkg.tar.zst
          fi
          pacman -Syw --noconfirm --cachedir /pkgs dolphinos-dolphin-data linux-zen linux-lts linux-zen-headers linux-lts-headers linux-firmware
          ls /pkgs
          ls archiso/airootfs/var/dolphinos-packages/
          cp /pkgs/dolphinos-dolphin-data*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/dolphinos-dolphin-data.pkg.tar.zst
          cp /pkgs/linux-zen*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/linux-zen.pkg.tar.zst
          cp /pkgs/linux-zen-headers*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/linux-zen-headers.pkg.tar.zst
          cp /pkgs/linux-lts*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/linux-lts.pkg.tar.zst
          cp /pkgs/linux-lts-headers*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/linux-lts-headers.pkg.tar.zst
          cp /pkgs/linux-firmware*.pkg.tar.zst archiso/airootfs/var/dolphinos-packages/linux-firmware.pkg.tar.zst

      - name: Build ISO
        working-directory: repo/${{ matrix.edition }}
        run: |
          rm -rf work build
          mkdir work build 
          sudo mkarchiso -v -r -w work -o build archiso
          sudo rm -rf work

      - name: Generate hashes
        working-directory: repo/${{ matrix.edition }}/build
        run: |
          sha256sum dolphinos*.iso > dolphinos-${{ matrix.edition }}-${{ env.NOW }}.sha256

      - name: Upload ISO to Sourceforge Releases
        working-directory: repo/${{ matrix.edition }}/build
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t ssh-ed25519 frs.sourceforge.net > ~/.ssh/known_hosts
          eval $(ssh-agent)
          ssh-add - <<< "$SSH_KEY"
          if [ "${{ matrix.edition }}" = "intel-amd" ]; then
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" dolphinos*.iso dolphinos@frs.sourceforge.net:/home/frs/project/dolphinos/DolphinOS
          else
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" dolphinos*.iso dolphinos@frs.sourceforge.net:/home/frs/project/dolphinos/DolphinOS-NVIDIA
          fi
        env:
          SSH_KEY: ${{ secrets.SOURCEFORGE_PRIVATE_KEY }}

      - name: Upload hashes as artifact (for release job)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.edition }}-${{ env.NOW }}-hash
          path: |
            repo/${{ matrix.edition }}/build/*.sha256

  publish_release:
    name: Publish Release
    needs: build_iso
    runs-on: self-hosted
    steps:
      - name: Download all hash artifacts
        uses: actions/download-artifact@v5
        with:
          path: hashes

      - name: List hashes
        run: ls -R hashes

      - name: Extract TAG_NOW from hash file name
        working-directory: hashes
        run: |
          # Grab the first sha256 filename
          FILE=$(find . -type f -name "*.sha256" | head -n1)
          echo "Found hash file: $FILE"

          # Extract the date part (assuming format: dolphinos-<edition>-YYYY.MM.DD.HH.MM-...)
          DATE=$(echo "$FILE" | grep -oE '[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}')

          # Convert dots to underscores
          TAG_NOW=$(echo "$DATE" | tr '.' '_')

          echo "NOW=$DATE" | tee -a $GITHUB_ENV
          echo "Tag to use: $TAG_NOW"
          echo "TAG_NOW=$TAG_NOW" | tee -a $GITHUB_ENV

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: DolphinOS-ISO-${{ env.TAG_NOW }}
          name: DolphinOS ISO ${{ env.TAG_NOW }}
          makeLatest: true
          allowUpdates: true
          artifacts: "hashes/**/*.sha256"
          body: |
            Automatically built latest ISOs.

            **Download from SourceForge:**
            - Intel/AMD:  https://sourceforge.net/projects/dolphinos/files/DolphinOS/dolphinos-${{ env.NOW }}-x86_64.iso/download
            - NVIDIA:     https://sourceforge.net/projects/dolphinos/files/DolphinOS-NVIDIA/dolphinos-nvidia-${{ env.NOW }}-x86_64.iso/download
